//---country
 const handleCountrySearch = async (value) => {
    setCountryInput(value);
    try {
      const response = await axios.get(
        // `https://restcountries.com/v3/name/${value}`
        `https://restcountries.com/v3/name/${value}?match=${value}&fields=name`
      );
      console.log("res", response);
      const countries = response.data.map((country) => ({
        label: country.name.common,
        value: country.name.common,
      }));
      setCountryOptions(countries);
    } catch (error) {
      console.error("Error fetching countries:", error);
    }
  };
  <FormControl fullWidth>
          <label htmlFor="country" id="country-label">
            Select Country
          </label>
          <Field
            list="countries"
            name="country"
            type="text"
            value={countryInput}
            onChange={(e) => handleCountrySearch(e.target.value)}
          />

          <datalist id="countries">
            {countryOptions.map((country) => (
              <option key={country.value} value={country.value}>
                {country.label}
              </option>
            ))}
          </datalist>
          {/* <TextField
            name="country"
            label="Country"
            variant="outlined"
            value={countryInput}
            onChange={(e) => handleCountrySearch(e.target.value)}
          /> */}
        </FormControl>
        {/* <Button type="submit">Submit</Button> */}
      </Form>
      //-----
      //-----
         <Autocomplete
        // value={inputValue}
        // onChange={(event, newValue) => setInputValue(newValue)}
        // inputValue={inputValue}
        // onInputChange={handleInputChange}
        options={options}
        autoHighlight
        getOptionLabel={(option) => option}
        //loading={loading}
        renderOption={(props, option) => (
          <Box component="li" {...props}>
            {option}
          </Box>
        )}
        // renderInput={(params) => (
        //   <TextField
        //     {...params}
        //     label="Country"
        //     variant="outlined"
        //     InputProps={{
        //       ...params.InputProps,
        //       endAdornment: (
        //         <>
        //           {loading ? (
        //             <CircularProgress color="inherit" size={20} />
        //           ) : null}
        //           {params.InputProps.endAdornment}
        //         </>
        //       ),
        //     }}
        //   />
        // )}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Choose a country"
            inputProps={{
              ...params.inputProps,
              autoComplete: "new-password", // disable autocomplete and autofill
            }}
          />
        )}
      />